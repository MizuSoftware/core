package wtf.mizu.core.intermediate;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import wtf.mizu.core.common.Singleton;
import wtf.mizu.oshanraina.intermediate.ContainerProcessingIntermediate;

import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;

import static javax.lang.model.element.Modifier.*;

public class SingletonIntermediate implements ContainerProcessingIntermediate {

    public static final String JAVADOC = "Generated by the {@link wtf.mizu" +
            ".core.common.Singleton singleton} annotation. If any public " +
            "constructor is available, please create new instances of this " +
            "class.";

    @Override
    public void process(TypeSpec.Builder builder, Element element, ClassName className) throws Exception {
        if(element.getAnnotation(Singleton.class) == null) return;

        builder.addField(FieldSpec.builder(className, "INSTANCE", PRIVATE,
                        STATIC, FINAL)
                .addJavadoc(JAVADOC)
                .initializer("new $T()", className)
                .build());
        builder.addMethod(MethodSpec.methodBuilder("instance")
                .addJavadoc(JAVADOC)
                .addModifiers(PUBLIC, STATIC, FINAL)
                .returns(className)
                .addStatement("return INSTANCE")
                .build());
    }
}
